// Code generated by MockGen. DO NOT EDIT.
// Source: ../registry/registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/dvdlevanon/stitcher/src/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskBuilder is a mock of TaskBuilder interface.
type MockTaskBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTaskBuilderMockRecorder
}

// MockTaskBuilderMockRecorder is the mock recorder for MockTaskBuilder.
type MockTaskBuilderMockRecorder struct {
	mock *MockTaskBuilder
}

// NewMockTaskBuilder creates a new mock instance.
func NewMockTaskBuilder(ctrl *gomock.Controller) *MockTaskBuilder {
	mock := &MockTaskBuilder{ctrl: ctrl}
	mock.recorder = &MockTaskBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskBuilder) EXPECT() *MockTaskBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockTaskBuilder) Build(name string, parent model.Directory) (model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", name, parent)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockTaskBuilderMockRecorder) Build(name, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockTaskBuilder)(nil).Build), name, parent)
}
